# Generated by Django 3.1.2 on 2021-05-13 00:45

import accounts.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('mypage', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='UniversityEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university_email_domain', models.CharField(blank=True, max_length=100, null=True)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='email_of_university', to='mypage.university')),
            ],
            options={
                'verbose_name': '認証用大学メールアドレス',
                'verbose_name_plural': '認証用大学メールアドレス一覧',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('status_position', models.IntegerField(choices=[(0, '学部1年生'), (1, '学部2年生'), (2, '学部3年生'), (3, '学部4年生'), (4, '学部5年生'), (5, '学部6年生'), (6, '修士1年生'), (7, '修士2年生'), (8, '博士1年生'), (9, '博士2年生'), (10, '博士3年生'), (11, '研究室関係者(教員)'), (12, 'その他')], verbose_name='身分')),
                ('is_lab_member', models.BooleanField(default=False, help_text='True: 研究室関係者, False: 学生', verbose_name='研究室関係者')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_belong_to_department', to='mypage.department')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_belong_to_faculty', to='mypage.faculty')),
                ('favorite_laboratory', models.ManyToManyField(blank=True, related_name='person_favorite_laboratory', to='mypage.Laboratory', verbose_name='お気に入り研究室')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('laboratory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_belong_to_laboratory', to='mypage.laboratory')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_belong_to_university', to='mypage.university')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', accounts.models.CustomUserManager()),
            ],
        ),
    ]
